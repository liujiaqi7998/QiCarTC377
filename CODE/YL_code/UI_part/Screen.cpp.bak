/*
 * Control.cpp
 *
 *  Created on: 2021年12月27日
 *      Author: huyongliang
 */


#include <Screen.h.bak>
#include "Motor_run.h"

// 线程控制块指针，创建线程时的标准操作
static rt_thread_t Screen_tid  = RT_NULL;
void show_entry(void *parameter);

//SPI参数列表
SPI_Param Interface = {SPI_2, //定义使用的SPI号
        SPI2_CS0_P15_2,  //定义SPI_CS引脚
        SPI2_SCLK_P15_3, //定义SPI_SCK引脚
        SPI2_MOSI_P15_5, //定义SPI_MOSI引脚
        SPI2_MISO_P15_4, //定义SPI_MISO引脚
        SPI_Mode_0,      //SPI模式(共4种)
        48 * 1000 * 1000 //SPI波特率
};
//IPS_114参数列表
IPS_114_Param Interface_param = {P15_4, //液晶背光引脚定义 由于实际通讯未使用P15_4因此 这里复用为GPIO
        P15_1, //液晶复位引脚定义
        P15_0, //液晶命令位引脚定义
        IPS_RED, //定义写字笔的颜色
        IPS_WHITE, //定义背景颜色
        IPS114_W, //定义IPS114最大宽度
        IPS114_H, //定义IPS114最大高度
        Direction3, //定义IPS114显示方向
        };

IPS_114 Inter_Screen = IPS_114(Interface_param,Interface);
struct rt_semaphore sem_lock;// 锁住所有线程
uint16 line;
char buf[8];//转换

  void show_init(void) {

      Inter_Screen.Init();
      Inter_Screen.Clear(IPS_WHITE);
      par=1.0;
      rt_sem_init(&sem_lock, "lock", 1, RT_IPC_FLAG_FIFO);//将静态信号量加入到管理器中
      rt_sem_take(&sem_lock, RT_WAITING_FOREVER);

      Screen_tid  = rt_thread_create("button", // 线程名称
                                     show_entry, // 线程入口函数
                                     RT_NULL, // 线程参数，RT_NULL表示无参，类似于void
                                     256,
                                     31,
                                     30);

         //启动显示线程
         if(Screen_tid!= RT_NULL )
         {
             rt_thread_startup(Screen_tid);
         }

}

  MSH_CMD_EXPORT(show_init,show);

  static void show_entry(void *parameter)
  {

      line=0;
      rt_thread_mdelay(500);
      rt_kprintf("Screen Thread has entered!\n");
      ui_InitImg();//ui初始化

      while (1)
      {

          if(flag==1&&menu==2){

//          rt_kprintf(" par is %.1lf   ,line is  %d      \n",par,line);
          sprintf(buf, "%.1lf", par);//转换成char型
          Inter_Screen.Show_String(8*4,line,(const char*)buf);
          *wait_change[line]=par;
          rt_kprintf(" l_kp %.2lf  l_ki %.2lf  l_kd %.2lf   \n",*wait_change[0],*wait_change[1],*wait_change[2]);
          rt_kprintf(" r_kp %.2lf  r_ki %.2lf  r_kd %.2lf   \n",*wait_change[3],*wait_change[4],*wait_change[5]);
          rt_kprintf("------------------------------------------------------------------\n");

          rt_thread_mdelay(200);

          }

      }

}












